#!/bin/sh

# Heavily borrowed from Ubuntu's livecd-rootfs/live-build/auto/build.
# Basically snapd will pick up snaps defind in /var/lib/snapd/seed/seed.yaml
# The yaml contains a list of objects defining the snap name, channel and file.
# The snaps and their assertions live in subdirs.
# To get the snaps to begin with we'll use snap download, which doesn't need
# snapd running.

set -ex

SEED_DIR='/var/lib/snapd/seed'
SNAPS_DIR="$SEED_DIR/snaps"
ASSERT_DIR="$SEED_DIR/assertions"

mkdir $SEED_DIR
cd $SEED_DIR

snap download core
snap download kde-frameworks-5

CORE_SNAP=$(ls -1 core_*.snap)

cat <<EOF > $SEED_DIR/seed.yaml
snaps:
- name: core
  channel: stable
  file: ${CORE_SNAP}
EOF

for snap in *.snap; do
  cat <<EOF >> $SEED_DIR/seed.yaml
- name: $snap
  channel: stable
  file: $snap
EOF
done

cat $SEED_DIR/seed.yaml

mkdir -p $SNAPS_DIR $ASSERT_DIR
mv -v $SEED_DIR/*.assert $ASSERT_DIR
mv -v $SEED_DIR/*.snap $SNAPS_DIR

# Dump generic assertions. This is a bit of a hack.
# For snapd to import our dumped snaps it needs a bunch of assertions to be
# present. The requirements aren't really documented from what I can tell, so
# I am assuming this is a matter of trial and error to see which errors snapd
# spits out of stateengine.
model_assertion="$ASSERT_DIR/generic-classic.model"
account_key_assertion="$ASSERT_DIR/generic.account-key"
account_assertion="$ASSERT_DIR/generic.account"

snap known --remote model series=16 model=generic-classic brand-id=generic > "$model_assertion"
account_key=$(sed -n -e's/sign-key-sha3-384: //p' < "$model_assertion")

snap known --remote account-key public-key-sha3-384="$account_key" > "$account_key_assertion"
account=$(sed -n -e's/account-id: //p' < "$account_key_assertion")

snap known --remote account account-id=generic > "$account_assertion"
