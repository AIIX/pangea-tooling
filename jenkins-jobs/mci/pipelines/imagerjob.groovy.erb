env.DIST = '<%= type %>'
env.JOB_NAME = '<%= type %>_pm_rootfs'

cleanNode('master') {
  stage('source') {
    parallel(
      "git[source]": {
        checkout([$class: 'GitSCM',
                  branches: [[name: '<%= branch %>']],
                  doGenerateSubmoduleConfigurations: false,
                  extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'rootfs-builder']],
                  submoduleCfg: [],
                  userRemoteConfigs: [[url: '<%= repo %>']]])
      }
    )
    stash name: 'source', includes: '**'
  }
}

// build image
cleanNode('armhf') {
    stage('image') {
        unstash 'source'
        sh '~/tooling/mci/imager.rb generic'
        archiveArtifacts 'result/*'
    }
}

cleanNode('armhf') {
    stage('image-caf') {
        unstash 'source'
        sh '~/tooling/mci/imager.rb caf'
        archiveArtifacts 'result/*'
    }
}

def cleanNode(label = null, body) {
  node(label) {
    deleteDir()
    try {
      wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm']) {
        wrap([$class: 'TimestamperBuildWrapper']) {
          body()
        }
      }
    } finally {
      step([$class: 'WsCleanup', cleanWhenFailure: true])
    }
  }
}
