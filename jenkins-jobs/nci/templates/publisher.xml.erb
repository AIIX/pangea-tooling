<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.dependencyqueue.BlockWhileUpstreamQueuedProperty plugin="dependency-queue-plugin@1.1">
      <blockWhileUpstreamQueued>false</blockWhileUpstreamQueued>
    </org.jenkinsci.plugins.dependencyqueue.BlockWhileUpstreamQueuedProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>true</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs>^mgmt_repo-cleanup.*$
^mgmt_aptly.+$</blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <org.jenkins.plugins.lockableresources.RequiredResourcesProperty plugin="lockable-resources@2.1">
      <resourceNames></resourceNames>
      <resourceNamesVar></resourceNamesVar>
      <resourceNumber>1</resourceNumber>
      <labelName>APTLY</labelName>
    </org.jenkins.plugins.lockableresources.RequiredResourcesProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>(amd64&amp;&amp;persistent)||(amd64&amp;&amp;cloud)||(amd64)</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>true</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.3">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.core.AlwaysRun" plugin="run-condition@1.0"/>
      <conditionalbuilders>
        <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.37">
          <project><%= basename %></project>
          <filter>run_stamp</filter>
          <target></target>
          <excludes></excludes>
          <selector class="hudson.plugins.copyartifact.TriggeredBuildSelector">
            <fallbackToLastSuccessful>true</fallbackToLastSuccessful>
            <upstreamFilterStrategy>UseGlobalSetting</upstreamFilterStrategy>
            <allowUpstreamDependencies>false</allowUpstreamDependencies>
          </selector>
          <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
        </hudson.plugins.copyartifact.CopyArtifact>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.35.1">
      <project><%= basename %>_src</project>
      <filter></filter>
      <target></target>
      <excludes></excludes>
      <selector class="com.tikal.jenkins.plugins.multijob.MultiJobBuildSelector" plugin="jenkins-multijob-plugin@1.20"/>
      <flatten>true</flatten>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
<% architectures.each do |arch| %>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.35.1">
      <project><%= basename %>_bin_<%= arch %></project>
      <filter></filter>
      <target></target>
      <excludes>**/*.txt</excludes>
      <optional>true</optional>
      <selector class="com.tikal.jenkins.plugins.multijob.MultiJobBuildSelector" plugin="jenkins-multijob-plugin@1.20"/>
      <flatten>true</flatten>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
<% end %>
    <hudson.tasks.Shell>
      <command>
        export BUNDLE_GEMFILE=$HOME/tooling/Gemfile # Make bundler able to setup.
        GATEWAY="ssh://neonarchives@archive-api.neon.kde.org/srv/neon-services/aptly.sock"
<%
  repos = []
  repos << "#{type}_#{distribution}"
  if type == 'unstable'
    if component == 'frameworks' || %w[pkg-kde-tools phonon].any? { |x| basename.include?(x) }
      # This has no stable version, the unstable version is supplying stable.
      # By pushing it forward we save on build time and noise jobs.
      repos << "stable_#{distribution}"
    end
    if component == 'qt' || basename.end_with?('pyqt5', 'sip4')
      # Qt things take forever to build, save on time and noise by forward
      # publishing them everywhere.
      #
      # NOTE: Not in release-lts since I think that is frozen, I am only
      #   guessing though. Jon has trouble writing comments.  - sitter
      repos += ["stable_#{distribution}", "release_#{distribution}"]
    end
  end
  repos = repos.uniq.compact.map { |x| "--repo #{x}" }.join(' ')
%>
    ~/tooling/ci-tooling/bin/pangea_dput --gateway $GATEWAY <%= repos %>  *.changes
      </command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.25">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs class="empty-list"/>
          <projects><%= dependees.join(', ') %>, </projects>
          <condition>UNSTABLE_OR_BETTER</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
    <hudson.plugins.ws__cleanup.WsCleanup plugin="ws-cleanup@0.28">
      <deleteDirs>false</deleteDirs>
      <skipWhenFailed>false</skipWhenFailed>
      <cleanWhenSuccess>true</cleanWhenSuccess>
      <cleanWhenUnstable>true</cleanWhenUnstable>
      <cleanWhenFailure>true</cleanWhenFailure>
      <cleanWhenNotBuilt>true</cleanWhenNotBuilt>
      <cleanWhenAborted>true</cleanWhenAborted>
      <notFailBuild>false</notFailBuild>
      <cleanupMatrixParent>false</cleanupMatrixParent>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.WsCleanup>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.26">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.6.2"/>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@0.4.1">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
    <org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper plugin="credentials-binding@1.13">
      <bindings>
        <org.jenkinsci.plugins.credentialsbinding.impl.SSHUserPrivateKeyBinding>
          <credentialsId>ssh.jobs.archive.neon</credentialsId>
          <keyFileVariable>SSH_KEY_FILE</keyFileVariable>
          <usernameVariable></usernameVariable>
          <passphraseVariable></passphraseVariable>
        </org.jenkinsci.plugins.credentialsbinding.impl.SSHUserPrivateKeyBinding>
      </bindings>
    </org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper>
  </buildWrappers>
</project>
